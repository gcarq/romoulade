use crate::gb::cpu::instruction::Instruction::*;
use crate::gb::cpu::misc::{
    ByteSource, IncDecByteTarget, IncDecWordTarget, JumpTest, Load, LoadByteTarget, LoadWordTarget,
    ResetCode, StackTarget, WordSource,
};
use std::fmt;
use std::fmt::Formatter;

pub enum Instruction {
    ADD(ByteSource),          // Add n to target
    ADDHL(WordSource),        // Add nn to HL
    ADDSP,                    // Add signed immediate 8 bit value to Stack Pointer
    ADC(ByteSource),          // Add n + Carry flag to A
    AND(ByteSource),          // Logically AND n with A, result in A
    BIT(u8, ByteSource),      // Test bit b in register r
    INC(IncDecByteTarget),    // Increment single byte register n
    INC2(IncDecWordTarget),   // Increment word register n
    CALL(JumpTest), // Push address of next instruction onto stack and then  jump to address nn
    CCF,            // Complement carry flag
    CP(ByteSource), // Compare A with source
    CPL,            // Flips all bits in A register, sets N and H flags
    DAA,            // This instruction is useful when youâ€™re using BCD value
    DI,             // Disables interrupt handling by setting ime = false
    DEC(IncDecByteTarget), // Decrement single byte register n
    DEC2(IncDecWordTarget), // Decrement word register n
    EI,             // Enables interrupt handling by setting ime = true
    HALT,           // Halts and wait for interrupt
    JR(JumpTest),   // Relative jump to given address
    JP(JumpTest, WordSource), // Jump to address nn
    LD(Load),       // Put value into n
    NOP,            // No operation
    OR(ByteSource), // Logical OR n with register A, result in A.
    PUSH(StackTarget), // Push to the stack memory, data from the 16-bit register
    POP(StackTarget), // Pops to the 16-bit register
    RES(u8, ByteSource), // Reset bit b in register r
    RET(JumpTest),  // Pop two bytes from stack & jump to that address
    RETI,           // Unconditional return which also enables interrupts
    RL(ByteSource), // Rotate n left through Carry flag
    RLA,            // Rotate `A` left through carry
    RLC(ByteSource), // Rotate target left
    RLCA,           // Rotate A left. Old bit 7 to Carry flag
    RR(ByteSource), // Rotate n right through Carry flag
    RRA,            // Rotate A right through Carry flag
    RRC(ByteSource), // Rotate n right. Old bit 0 to Carry flag
    RRCA,           // Rotate A right. Old bit 0 to Carry flag
    RST(ResetCode), // Push present address onto stack.  Jump to address 0x0000 + n
    SBC(ByteSource), // Subtract n + Carry flag from A
    SCF,            // Set carry flag
    SET(u8, ByteSource), // Set bit b in register r
    SLA(ByteSource), // Shift n left into Carry. LSB of n set to 0
    SRA(ByteSource), // Shift n right into Carry. MSB doesn't change
    SRL(ByteSource), // Shift right into Carry, MSB set to 0
    SUB(ByteSource), // Subtract n from A
    STOP,           // Halt CPU & LCD display until button pressed
    SWAP(ByteSource), // Swap upper & lower nibbles of n
    XOR(ByteSource), // Logical exclusive OR n with register A, result in A
}

impl Instruction {
    #[inline]
    pub const fn from_byte(byte: u8, prefixed: bool) -> Option<Instruction> {
        match prefixed {
            true => Self::from_byte_prefixed(byte),
            false => Self::from_byte_not_prefixed(byte),
        }
    }

    /// Maps 0xCB prefixed opcodes to Instructions
    const fn from_byte_prefixed(opcode: u8) -> Option<Instruction> {
        match opcode {
            0x00 => Some(RLC(ByteSource::B)),
            0x01 => Some(RLC(ByteSource::C)),
            0x02 => Some(RLC(ByteSource::D)),
            0x03 => Some(RLC(ByteSource::E)),
            0x04 => Some(RLC(ByteSource::H)),
            0x05 => Some(RLC(ByteSource::L)),
            0x06 => Some(RLC(ByteSource::HLI)),
            0x07 => Some(RLC(ByteSource::A)),

            0x08 => Some(RRC(ByteSource::B)),
            0x09 => Some(RRC(ByteSource::C)),
            0x0a => Some(RRC(ByteSource::D)),
            0x0b => Some(RRC(ByteSource::E)),
            0x0c => Some(RRC(ByteSource::H)),
            0x0d => Some(RRC(ByteSource::L)),
            0x0e => Some(RRC(ByteSource::HLI)),
            0x0f => Some(RRC(ByteSource::A)),

            0x10 => Some(RL(ByteSource::B)),
            0x11 => Some(RL(ByteSource::C)),
            0x12 => Some(RL(ByteSource::D)),
            0x13 => Some(RL(ByteSource::E)),
            0x14 => Some(RL(ByteSource::H)),
            0x15 => Some(RL(ByteSource::L)),
            0x16 => Some(RL(ByteSource::HLI)),
            0x17 => Some(RL(ByteSource::A)),

            0x18 => Some(RR(ByteSource::B)),
            0x19 => Some(RR(ByteSource::C)),
            0x1a => Some(RR(ByteSource::D)),
            0x1b => Some(RR(ByteSource::E)),
            0x1c => Some(RR(ByteSource::H)),
            0x1d => Some(RR(ByteSource::L)),
            0x1e => Some(RR(ByteSource::HLI)),
            0x1f => Some(RR(ByteSource::A)),

            0x20 => Some(SLA(ByteSource::B)),
            0x21 => Some(SLA(ByteSource::C)),
            0x22 => Some(SLA(ByteSource::D)),
            0x23 => Some(SLA(ByteSource::E)),
            0x24 => Some(SLA(ByteSource::H)),
            0x25 => Some(SLA(ByteSource::L)),
            0x26 => Some(SLA(ByteSource::HLI)),
            0x27 => Some(SLA(ByteSource::A)),

            0x28 => Some(SRA(ByteSource::B)),
            0x29 => Some(SRA(ByteSource::C)),
            0x2a => Some(SRA(ByteSource::D)),
            0x2b => Some(SRA(ByteSource::E)),
            0x2c => Some(SRA(ByteSource::H)),
            0x2d => Some(SRA(ByteSource::L)),
            0x2e => Some(SRA(ByteSource::HLI)),
            0x2f => Some(SRA(ByteSource::A)),

            0x30 => Some(SWAP(ByteSource::B)),
            0x31 => Some(SWAP(ByteSource::C)),
            0x32 => Some(SWAP(ByteSource::D)),
            0x33 => Some(SWAP(ByteSource::E)),
            0x34 => Some(SWAP(ByteSource::H)),
            0x35 => Some(SWAP(ByteSource::L)),
            0x36 => Some(SWAP(ByteSource::HLI)),
            0x37 => Some(SWAP(ByteSource::A)),

            0x38 => Some(SRL(ByteSource::B)),
            0x39 => Some(SRL(ByteSource::C)),
            0x3a => Some(SRL(ByteSource::D)),
            0x3b => Some(SRL(ByteSource::E)),
            0x3c => Some(SRL(ByteSource::H)),
            0x3d => Some(SRL(ByteSource::L)),
            0x3e => Some(SRL(ByteSource::HLI)),
            0x3f => Some(SRL(ByteSource::A)),

            0x40 => Some(BIT(0, ByteSource::B)),
            0x41 => Some(BIT(0, ByteSource::C)),
            0x42 => Some(BIT(0, ByteSource::D)),
            0x43 => Some(BIT(0, ByteSource::E)),
            0x44 => Some(BIT(0, ByteSource::H)),
            0x45 => Some(BIT(0, ByteSource::L)),
            0x46 => Some(BIT(0, ByteSource::HLI)),
            0x47 => Some(BIT(0, ByteSource::A)),

            0x48 => Some(BIT(1, ByteSource::B)),
            0x49 => Some(BIT(1, ByteSource::C)),
            0x4a => Some(BIT(1, ByteSource::D)),
            0x4b => Some(BIT(1, ByteSource::E)),
            0x4c => Some(BIT(1, ByteSource::H)),
            0x4d => Some(BIT(1, ByteSource::L)),
            0x4e => Some(BIT(1, ByteSource::HLI)),
            0x4f => Some(BIT(1, ByteSource::A)),

            0x50 => Some(BIT(2, ByteSource::B)),
            0x51 => Some(BIT(2, ByteSource::C)),
            0x52 => Some(BIT(2, ByteSource::D)),
            0x53 => Some(BIT(2, ByteSource::E)),
            0x54 => Some(BIT(2, ByteSource::H)),
            0x55 => Some(BIT(2, ByteSource::L)),
            0x56 => Some(BIT(2, ByteSource::HLI)),
            0x57 => Some(BIT(2, ByteSource::A)),

            0x58 => Some(BIT(3, ByteSource::B)),
            0x59 => Some(BIT(3, ByteSource::C)),
            0x5a => Some(BIT(3, ByteSource::D)),
            0x5b => Some(BIT(3, ByteSource::E)),
            0x5c => Some(BIT(3, ByteSource::H)),
            0x5d => Some(BIT(3, ByteSource::L)),
            0x5e => Some(BIT(3, ByteSource::HLI)),
            0x5f => Some(BIT(3, ByteSource::A)),

            0x60 => Some(BIT(4, ByteSource::B)),
            0x61 => Some(BIT(4, ByteSource::C)),
            0x62 => Some(BIT(4, ByteSource::D)),
            0x63 => Some(BIT(4, ByteSource::E)),
            0x64 => Some(BIT(4, ByteSource::H)),
            0x65 => Some(BIT(4, ByteSource::L)),
            0x66 => Some(BIT(4, ByteSource::HLI)),
            0x67 => Some(BIT(4, ByteSource::A)),

            0x68 => Some(BIT(5, ByteSource::B)),
            0x69 => Some(BIT(5, ByteSource::C)),
            0x6a => Some(BIT(5, ByteSource::D)),
            0x6b => Some(BIT(5, ByteSource::E)),
            0x6c => Some(BIT(5, ByteSource::H)),
            0x6d => Some(BIT(5, ByteSource::L)),
            0x6e => Some(BIT(5, ByteSource::HLI)),
            0x6f => Some(BIT(5, ByteSource::A)),

            0x70 => Some(BIT(6, ByteSource::B)),
            0x71 => Some(BIT(6, ByteSource::C)),
            0x72 => Some(BIT(6, ByteSource::D)),
            0x73 => Some(BIT(6, ByteSource::E)),
            0x74 => Some(BIT(6, ByteSource::H)),
            0x75 => Some(BIT(6, ByteSource::L)),
            0x76 => Some(BIT(6, ByteSource::HLI)),
            0x77 => Some(BIT(6, ByteSource::A)),

            0x78 => Some(BIT(7, ByteSource::B)),
            0x79 => Some(BIT(7, ByteSource::C)),
            0x7a => Some(BIT(7, ByteSource::D)),
            0x7b => Some(BIT(7, ByteSource::E)),
            0x7c => Some(BIT(7, ByteSource::H)),
            0x7d => Some(BIT(7, ByteSource::L)),
            0x7e => Some(BIT(7, ByteSource::HLI)),
            0x7f => Some(BIT(7, ByteSource::A)),

            0x80 => Some(RES(0, ByteSource::B)),
            0x81 => Some(RES(0, ByteSource::C)),
            0x82 => Some(RES(0, ByteSource::D)),
            0x83 => Some(RES(0, ByteSource::E)),
            0x84 => Some(RES(0, ByteSource::H)),
            0x85 => Some(RES(0, ByteSource::L)),
            0x86 => Some(RES(0, ByteSource::HLI)),
            0x87 => Some(RES(0, ByteSource::A)),

            0x88 => Some(RES(1, ByteSource::B)),
            0x89 => Some(RES(1, ByteSource::C)),
            0x8a => Some(RES(1, ByteSource::D)),
            0x8b => Some(RES(1, ByteSource::E)),
            0x8c => Some(RES(1, ByteSource::H)),
            0x8d => Some(RES(1, ByteSource::L)),
            0x8e => Some(RES(1, ByteSource::HLI)),
            0x8f => Some(RES(1, ByteSource::A)),

            0x90 => Some(RES(2, ByteSource::B)),
            0x91 => Some(RES(2, ByteSource::C)),
            0x92 => Some(RES(2, ByteSource::D)),
            0x93 => Some(RES(2, ByteSource::E)),
            0x94 => Some(RES(2, ByteSource::H)),
            0x95 => Some(RES(2, ByteSource::L)),
            0x96 => Some(RES(2, ByteSource::HLI)),
            0x97 => Some(RES(2, ByteSource::A)),

            0x98 => Some(RES(3, ByteSource::B)),
            0x99 => Some(RES(3, ByteSource::C)),
            0x9a => Some(RES(3, ByteSource::D)),
            0x9b => Some(RES(3, ByteSource::E)),
            0x9c => Some(RES(3, ByteSource::H)),
            0x9d => Some(RES(3, ByteSource::L)),
            0x9e => Some(RES(3, ByteSource::HLI)),
            0x9f => Some(RES(3, ByteSource::A)),

            0xa0 => Some(RES(4, ByteSource::B)),
            0xa1 => Some(RES(4, ByteSource::C)),
            0xa2 => Some(RES(4, ByteSource::D)),
            0xa3 => Some(RES(4, ByteSource::E)),
            0xa4 => Some(RES(4, ByteSource::H)),
            0xa5 => Some(RES(4, ByteSource::L)),
            0xa6 => Some(RES(4, ByteSource::HLI)),
            0xa7 => Some(RES(4, ByteSource::A)),

            0xa8 => Some(RES(5, ByteSource::B)),
            0xa9 => Some(RES(5, ByteSource::C)),
            0xaa => Some(RES(5, ByteSource::D)),
            0xab => Some(RES(5, ByteSource::E)),
            0xac => Some(RES(5, ByteSource::H)),
            0xad => Some(RES(5, ByteSource::L)),
            0xae => Some(RES(5, ByteSource::HLI)),
            0xaf => Some(RES(5, ByteSource::A)),

            0xb0 => Some(RES(6, ByteSource::B)),
            0xb1 => Some(RES(6, ByteSource::C)),
            0xb2 => Some(RES(6, ByteSource::D)),
            0xb3 => Some(RES(6, ByteSource::E)),
            0xb4 => Some(RES(6, ByteSource::H)),
            0xb5 => Some(RES(6, ByteSource::L)),
            0xb6 => Some(RES(6, ByteSource::HLI)),
            0xb7 => Some(RES(6, ByteSource::A)),

            0xb8 => Some(RES(7, ByteSource::B)),
            0xb9 => Some(RES(7, ByteSource::C)),
            0xba => Some(RES(7, ByteSource::D)),
            0xbb => Some(RES(7, ByteSource::E)),
            0xbc => Some(RES(7, ByteSource::H)),
            0xbd => Some(RES(7, ByteSource::L)),
            0xbe => Some(RES(7, ByteSource::HLI)),
            0xbf => Some(RES(7, ByteSource::A)),

            0xc0 => Some(SET(0, ByteSource::B)),
            0xc1 => Some(SET(0, ByteSource::C)),
            0xc2 => Some(SET(0, ByteSource::D)),
            0xc3 => Some(SET(0, ByteSource::E)),
            0xc4 => Some(SET(0, ByteSource::H)),
            0xc5 => Some(SET(0, ByteSource::L)),
            0xc6 => Some(SET(0, ByteSource::HLI)),
            0xc7 => Some(SET(0, ByteSource::A)),

            0xc8 => Some(SET(1, ByteSource::B)),
            0xc9 => Some(SET(1, ByteSource::C)),
            0xca => Some(SET(1, ByteSource::D)),
            0xcb => Some(SET(1, ByteSource::E)),
            0xcc => Some(SET(1, ByteSource::H)),
            0xcd => Some(SET(1, ByteSource::L)),
            0xce => Some(SET(1, ByteSource::HLI)),
            0xcf => Some(SET(1, ByteSource::A)),

            0xd0 => Some(SET(2, ByteSource::B)),
            0xd1 => Some(SET(2, ByteSource::C)),
            0xd2 => Some(SET(2, ByteSource::D)),
            0xd3 => Some(SET(2, ByteSource::E)),
            0xd4 => Some(SET(2, ByteSource::H)),
            0xd5 => Some(SET(2, ByteSource::L)),
            0xd6 => Some(SET(2, ByteSource::HLI)),
            0xd7 => Some(SET(2, ByteSource::A)),

            0xd8 => Some(SET(3, ByteSource::B)),
            0xd9 => Some(SET(3, ByteSource::C)),
            0xda => Some(SET(3, ByteSource::D)),
            0xdb => Some(SET(3, ByteSource::E)),
            0xdc => Some(SET(3, ByteSource::H)),
            0xdd => Some(SET(3, ByteSource::L)),
            0xde => Some(SET(3, ByteSource::HLI)),
            0xdf => Some(SET(3, ByteSource::A)),

            0xe0 => Some(SET(4, ByteSource::B)),
            0xe1 => Some(SET(4, ByteSource::C)),
            0xe2 => Some(SET(4, ByteSource::D)),
            0xe3 => Some(SET(4, ByteSource::E)),
            0xe4 => Some(SET(4, ByteSource::H)),
            0xe5 => Some(SET(4, ByteSource::L)),
            0xe6 => Some(SET(4, ByteSource::HLI)),
            0xe7 => Some(SET(4, ByteSource::A)),

            0xe8 => Some(SET(5, ByteSource::B)),
            0xe9 => Some(SET(5, ByteSource::C)),
            0xea => Some(SET(5, ByteSource::D)),
            0xeb => Some(SET(5, ByteSource::E)),
            0xec => Some(SET(5, ByteSource::H)),
            0xed => Some(SET(5, ByteSource::L)),
            0xee => Some(SET(5, ByteSource::HLI)),
            0xef => Some(SET(5, ByteSource::A)),

            0xf0 => Some(SET(6, ByteSource::B)),
            0xf1 => Some(SET(6, ByteSource::C)),
            0xf2 => Some(SET(6, ByteSource::D)),
            0xf3 => Some(SET(6, ByteSource::E)),
            0xf4 => Some(SET(6, ByteSource::H)),
            0xf5 => Some(SET(6, ByteSource::L)),
            0xf6 => Some(SET(6, ByteSource::HLI)),
            0xf7 => Some(SET(6, ByteSource::A)),

            0xf8 => Some(SET(7, ByteSource::B)),
            0xf9 => Some(SET(7, ByteSource::C)),
            0xfa => Some(SET(7, ByteSource::D)),
            0xfb => Some(SET(7, ByteSource::E)),
            0xfc => Some(SET(7, ByteSource::H)),
            0xfd => Some(SET(7, ByteSource::L)),
            0xfe => Some(SET(7, ByteSource::HLI)),
            0xff => Some(SET(7, ByteSource::A)),
        }
    }

    /// Maps non-prefixed opcodes to Instructions
    const fn from_byte_not_prefixed(opcode: u8) -> Option<Instruction> {
        match opcode {
            0x00 => Some(NOP),
            0x01 => Some(LD(Load::Word(LoadWordTarget::BC, WordSource::D16))),
            0x02 => Some(LD(Load::IndirectFrom(LoadByteTarget::BCI, ByteSource::A))),
            0x03 => Some(INC2(IncDecWordTarget::BC)),
            0x04 => Some(INC(IncDecByteTarget::B)),
            0x05 => Some(DEC(IncDecByteTarget::B)),
            0x06 => Some(LD(Load::Byte(LoadByteTarget::B, ByteSource::D8))),
            0x07 => Some(RLCA),
            0x08 => Some(LD(Load::IndirectFromWord(
                LoadWordTarget::D16I,
                WordSource::SP,
            ))),
            0x09 => Some(ADDHL(WordSource::BC)),
            0x0a => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::BCI))),
            0x0b => Some(DEC2(IncDecWordTarget::BC)),
            0x0c => Some(INC(IncDecByteTarget::C)),
            0x0d => Some(DEC(IncDecByteTarget::C)),
            0x0e => Some(LD(Load::Byte(LoadByteTarget::C, ByteSource::D8))),
            0x0f => Some(RRCA),

            0x10 => Some(STOP),
            0x11 => Some(LD(Load::Word(LoadWordTarget::DE, WordSource::D16))),
            0x12 => Some(LD(Load::IndirectFrom(LoadByteTarget::DEI, ByteSource::A))),
            0x13 => Some(INC2(IncDecWordTarget::DE)),
            0x14 => Some(INC(IncDecByteTarget::D)),
            0x15 => Some(DEC(IncDecByteTarget::D)),
            0x16 => Some(LD(Load::Byte(LoadByteTarget::D, ByteSource::D8))),
            0x17 => Some(RLA),
            0x18 => Some(JR(JumpTest::Always)),
            0x19 => Some(ADDHL(WordSource::DE)),
            0x1a => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::DEI))),
            0x1b => Some(DEC2(IncDecWordTarget::DE)),
            0x1c => Some(INC(IncDecByteTarget::E)),
            0x1d => Some(DEC(IncDecByteTarget::E)),
            0x1e => Some(LD(Load::Byte(LoadByteTarget::E, ByteSource::D8))),
            0x1f => Some(RRA),

            0x20 => Some(JR(JumpTest::NotZero)),
            0x21 => Some(LD(Load::Word(LoadWordTarget::HL, WordSource::D16))),
            0x22 => Some(LD(Load::IndirectFromAInc(LoadByteTarget::HLI))),
            0x23 => Some(INC2(IncDecWordTarget::HL)),
            0x24 => Some(INC(IncDecByteTarget::H)),
            0x25 => Some(DEC(IncDecByteTarget::H)),
            0x26 => Some(LD(Load::Byte(LoadByteTarget::H, ByteSource::D8))),
            0x27 => Some(DAA),
            0x28 => Some(JR(JumpTest::Zero)),
            0x29 => Some(ADDHL(WordSource::HL)),
            0x2a => Some(LD(Load::FromIndirectAInc(ByteSource::HLI))),
            0x2b => Some(DEC2(IncDecWordTarget::HL)),
            0x2c => Some(INC(IncDecByteTarget::L)),
            0x2d => Some(DEC(IncDecByteTarget::L)),
            0x2e => Some(LD(Load::Byte(LoadByteTarget::L, ByteSource::D8))),
            0x2f => Some(CPL),

            0x30 => Some(JR(JumpTest::NotCarry)),
            0x31 => Some(LD(Load::Word(LoadWordTarget::SP, WordSource::D16))),
            0x32 => Some(LD(Load::IndirectFromADec(LoadByteTarget::HLI))),
            0x33 => Some(INC2(IncDecWordTarget::SP)),
            0x34 => Some(INC(IncDecByteTarget::HLI)),
            0x35 => Some(DEC(IncDecByteTarget::HLI)),
            0x36 => Some(LD(Load::Byte(LoadByteTarget::HLI, ByteSource::D8))),
            0x37 => Some(SCF),
            0x38 => Some(JR(JumpTest::Carry)),
            0x39 => Some(ADDHL(WordSource::SP)),
            0x3a => Some(LD(Load::FromIndirectADec(ByteSource::HLI))),
            0x3b => Some(DEC2(IncDecWordTarget::SP)),
            0x3c => Some(INC(IncDecByteTarget::A)),
            0x3d => Some(DEC(IncDecByteTarget::A)),
            0x3e => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::D8))),
            0x3f => Some(CCF),

            0x40 => Some(LD(Load::Byte(LoadByteTarget::B, ByteSource::B))),
            0x41 => Some(LD(Load::Byte(LoadByteTarget::B, ByteSource::C))),
            0x42 => Some(LD(Load::Byte(LoadByteTarget::B, ByteSource::D))),
            0x43 => Some(LD(Load::Byte(LoadByteTarget::B, ByteSource::E))),
            0x44 => Some(LD(Load::Byte(LoadByteTarget::B, ByteSource::H))),
            0x45 => Some(LD(Load::Byte(LoadByteTarget::B, ByteSource::L))),
            0x46 => Some(LD(Load::Byte(LoadByteTarget::B, ByteSource::HLI))),
            0x47 => Some(LD(Load::Byte(LoadByteTarget::B, ByteSource::A))),
            0x48 => Some(LD(Load::Byte(LoadByteTarget::C, ByteSource::B))),
            0x49 => Some(LD(Load::Byte(LoadByteTarget::C, ByteSource::C))),
            0x4a => Some(LD(Load::Byte(LoadByteTarget::C, ByteSource::D))),
            0x4b => Some(LD(Load::Byte(LoadByteTarget::C, ByteSource::E))),
            0x4c => Some(LD(Load::Byte(LoadByteTarget::C, ByteSource::H))),
            0x4d => Some(LD(Load::Byte(LoadByteTarget::C, ByteSource::L))),
            0x4e => Some(LD(Load::Byte(LoadByteTarget::C, ByteSource::HLI))),
            0x4f => Some(LD(Load::Byte(LoadByteTarget::C, ByteSource::A))),

            0x50 => Some(LD(Load::Byte(LoadByteTarget::D, ByteSource::B))),
            0x51 => Some(LD(Load::Byte(LoadByteTarget::D, ByteSource::C))),
            0x52 => Some(LD(Load::Byte(LoadByteTarget::D, ByteSource::D))),
            0x53 => Some(LD(Load::Byte(LoadByteTarget::D, ByteSource::E))),
            0x54 => Some(LD(Load::Byte(LoadByteTarget::D, ByteSource::H))),
            0x55 => Some(LD(Load::Byte(LoadByteTarget::D, ByteSource::L))),
            0x56 => Some(LD(Load::Byte(LoadByteTarget::D, ByteSource::HLI))),
            0x57 => Some(LD(Load::Byte(LoadByteTarget::D, ByteSource::A))),
            0x58 => Some(LD(Load::Byte(LoadByteTarget::E, ByteSource::B))),
            0x59 => Some(LD(Load::Byte(LoadByteTarget::E, ByteSource::C))),
            0x5a => Some(LD(Load::Byte(LoadByteTarget::E, ByteSource::D))),
            0x5b => Some(LD(Load::Byte(LoadByteTarget::E, ByteSource::E))),
            0x5c => Some(LD(Load::Byte(LoadByteTarget::E, ByteSource::H))),
            0x5d => Some(LD(Load::Byte(LoadByteTarget::E, ByteSource::L))),
            0x5e => Some(LD(Load::Byte(LoadByteTarget::E, ByteSource::HLI))),
            0x5f => Some(LD(Load::Byte(LoadByteTarget::E, ByteSource::A))),

            0x60 => Some(LD(Load::Byte(LoadByteTarget::H, ByteSource::B))),
            0x61 => Some(LD(Load::Byte(LoadByteTarget::H, ByteSource::C))),
            0x62 => Some(LD(Load::Byte(LoadByteTarget::H, ByteSource::D))),
            0x63 => Some(LD(Load::Byte(LoadByteTarget::H, ByteSource::E))),
            0x64 => Some(LD(Load::Byte(LoadByteTarget::H, ByteSource::H))),
            0x65 => Some(LD(Load::Byte(LoadByteTarget::H, ByteSource::L))),
            0x66 => Some(LD(Load::Byte(LoadByteTarget::H, ByteSource::HLI))),
            0x67 => Some(LD(Load::Byte(LoadByteTarget::H, ByteSource::A))),
            0x68 => Some(LD(Load::Byte(LoadByteTarget::L, ByteSource::B))),
            0x69 => Some(LD(Load::Byte(LoadByteTarget::L, ByteSource::C))),
            0x6a => Some(LD(Load::Byte(LoadByteTarget::L, ByteSource::D))),
            0x6b => Some(LD(Load::Byte(LoadByteTarget::L, ByteSource::E))),
            0x6c => Some(LD(Load::Byte(LoadByteTarget::L, ByteSource::H))),
            0x6d => Some(LD(Load::Byte(LoadByteTarget::L, ByteSource::L))),
            0x6e => Some(LD(Load::Byte(LoadByteTarget::L, ByteSource::HLI))),
            0x6f => Some(LD(Load::Byte(LoadByteTarget::L, ByteSource::A))),

            0x70 => Some(LD(Load::Byte(LoadByteTarget::HLI, ByteSource::B))),
            0x71 => Some(LD(Load::Byte(LoadByteTarget::HLI, ByteSource::C))),
            0x72 => Some(LD(Load::Byte(LoadByteTarget::HLI, ByteSource::D))),
            0x73 => Some(LD(Load::Byte(LoadByteTarget::HLI, ByteSource::E))),
            0x74 => Some(LD(Load::Byte(LoadByteTarget::HLI, ByteSource::H))),
            0x75 => Some(LD(Load::Byte(LoadByteTarget::HLI, ByteSource::L))),
            0x76 => Some(HALT),
            0x77 => Some(LD(Load::Byte(LoadByteTarget::HLI, ByteSource::A))),
            0x78 => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::B))),
            0x79 => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::C))),
            0x7a => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::D))),
            0x7b => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::E))),
            0x7c => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::H))),
            0x7d => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::L))),
            0x7e => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::HLI))),
            0x7f => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::A))),

            0x80 => Some(ADD(ByteSource::B)),
            0x81 => Some(ADD(ByteSource::C)),
            0x82 => Some(ADD(ByteSource::D)),
            0x83 => Some(ADD(ByteSource::E)),
            0x84 => Some(ADD(ByteSource::H)),
            0x85 => Some(ADD(ByteSource::L)),
            0x86 => Some(ADD(ByteSource::HLI)),
            0x87 => Some(ADD(ByteSource::A)),
            0x88 => Some(ADC(ByteSource::B)),
            0x89 => Some(ADC(ByteSource::C)),
            0x8a => Some(ADC(ByteSource::D)),
            0x8b => Some(ADC(ByteSource::E)),
            0x8c => Some(ADC(ByteSource::H)),
            0x8d => Some(ADC(ByteSource::L)),
            0x8e => Some(ADC(ByteSource::HLI)),
            0x8f => Some(ADC(ByteSource::A)),

            0x90 => Some(SUB(ByteSource::B)),
            0x91 => Some(SUB(ByteSource::C)),
            0x92 => Some(SUB(ByteSource::D)),
            0x93 => Some(SUB(ByteSource::E)),
            0x94 => Some(SUB(ByteSource::H)),
            0x95 => Some(SUB(ByteSource::L)),
            0x96 => Some(SUB(ByteSource::HLI)),
            0x97 => Some(SUB(ByteSource::A)),
            0x98 => Some(SBC(ByteSource::B)),
            0x99 => Some(SBC(ByteSource::C)),
            0x9a => Some(SBC(ByteSource::D)),
            0x9b => Some(SBC(ByteSource::E)),
            0x9c => Some(SBC(ByteSource::H)),
            0x9d => Some(SBC(ByteSource::L)),
            0x9e => Some(SBC(ByteSource::HLI)),
            0x9f => Some(SBC(ByteSource::A)),

            0xa0 => Some(AND(ByteSource::B)),
            0xa1 => Some(AND(ByteSource::C)),
            0xa2 => Some(AND(ByteSource::D)),
            0xa3 => Some(AND(ByteSource::E)),
            0xa4 => Some(AND(ByteSource::H)),
            0xa5 => Some(AND(ByteSource::L)),
            0xa6 => Some(AND(ByteSource::HLI)),
            0xa7 => Some(AND(ByteSource::A)),
            0xa8 => Some(XOR(ByteSource::B)),
            0xa9 => Some(XOR(ByteSource::C)),
            0xaa => Some(XOR(ByteSource::D)),
            0xab => Some(XOR(ByteSource::E)),
            0xac => Some(XOR(ByteSource::H)),
            0xad => Some(XOR(ByteSource::L)),
            0xae => Some(XOR(ByteSource::HLI)),
            0xaf => Some(XOR(ByteSource::A)),

            0xb0 => Some(OR(ByteSource::B)),
            0xb1 => Some(OR(ByteSource::C)),
            0xb2 => Some(OR(ByteSource::D)),
            0xb3 => Some(OR(ByteSource::E)),
            0xb4 => Some(OR(ByteSource::H)),
            0xb5 => Some(OR(ByteSource::L)),
            0xb6 => Some(OR(ByteSource::HLI)),
            0xb7 => Some(OR(ByteSource::A)),
            0xb8 => Some(CP(ByteSource::B)),
            0xb9 => Some(CP(ByteSource::C)),
            0xba => Some(CP(ByteSource::D)),
            0xbb => Some(CP(ByteSource::E)),
            0xbc => Some(CP(ByteSource::H)),
            0xbd => Some(CP(ByteSource::L)),
            0xbe => Some(CP(ByteSource::HLI)),
            0xbf => Some(CP(ByteSource::A)),

            0xc0 => Some(RET(JumpTest::NotZero)),
            0xc1 => Some(POP(StackTarget::BC)),
            0xc2 => Some(JP(JumpTest::NotZero, WordSource::D16)),
            0xc3 => Some(JP(JumpTest::Always, WordSource::D16)),
            0xc4 => Some(CALL(JumpTest::NotZero)),
            0xc5 => Some(PUSH(StackTarget::BC)),
            0xc6 => Some(ADD(ByteSource::D8)),
            0xc7 => Some(RST(ResetCode::RST00)),
            0xc8 => Some(RET(JumpTest::Zero)),
            0xc9 => Some(RET(JumpTest::Always)),
            0xca => Some(JP(JumpTest::Zero, WordSource::D16)),
            0xcb => panic!("CB Prefix"),
            0xcc => Some(CALL(JumpTest::Zero)),
            0xcd => Some(CALL(JumpTest::Always)),
            0xce => Some(ADC(ByteSource::D8)),
            0xcf => Some(RST(ResetCode::RST08)),

            0xd0 => Some(RET(JumpTest::NotCarry)),
            0xd1 => Some(POP(StackTarget::DE)),
            0xd2 => Some(JP(JumpTest::NotCarry, WordSource::D16)),
            0xd3 => None,
            0xd4 => Some(CALL(JumpTest::NotCarry)),
            0xd5 => Some(PUSH(StackTarget::DE)),
            0xd6 => Some(SUB(ByteSource::D8)),
            0xd7 => Some(RST(ResetCode::RST10)),
            0xd8 => Some(RET(JumpTest::Carry)),
            0xd9 => Some(RETI),
            0xda => Some(JP(JumpTest::Carry, WordSource::D16)),
            0xdb => None,
            0xdc => Some(CALL(JumpTest::Carry)),
            0xdd => None,
            0xde => Some(SBC(ByteSource::D8)),
            0xdf => Some(RST(ResetCode::RST18)),

            0xe0 => Some(LD(Load::IndirectFrom(
                LoadByteTarget::D8IFF00,
                ByteSource::A,
            ))),
            0xe1 => Some(POP(StackTarget::HL)),
            0xe2 => Some(LD(Load::IndirectFrom(
                LoadByteTarget::CIFF00,
                ByteSource::A,
            ))),
            0xe3 => None,
            0xe4 => None,
            0xe5 => Some(PUSH(StackTarget::HL)),
            0xe6 => Some(AND(ByteSource::D8)),
            0xe7 => Some(RST(ResetCode::RST20)),
            0xe8 => Some(ADDSP),
            0xe9 => Some(JP(JumpTest::Always, WordSource::HL)),
            0xea => Some(LD(Load::IndirectFrom(LoadByteTarget::D16I, ByteSource::A))),
            0xeb => None,
            0xec => None,
            0xed => None,
            0xee => Some(XOR(ByteSource::D8)),
            0xef => Some(RST(ResetCode::RST28)),

            0xf0 => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::D8IFF00))),
            0xf1 => Some(POP(StackTarget::AF)),
            0xf2 => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::CIFF00))),
            0xf3 => Some(DI),
            0xf4 => None,
            0xf5 => Some(PUSH(StackTarget::AF)),
            0xf6 => Some(OR(ByteSource::D8)),
            0xf7 => Some(RST(ResetCode::RST30)),
            0xf8 => Some(LD(Load::IndirectFromSPi8(LoadWordTarget::HL))),
            0xf9 => Some(LD(Load::Word(LoadWordTarget::SP, WordSource::HL))),
            0xfa => Some(LD(Load::Byte(LoadByteTarget::A, ByteSource::D16I))),
            0xfb => Some(EI),
            0xfc => None,
            0xfd => None,
            0xfe => Some(CP(ByteSource::D8)),
            0xff => Some(RST(ResetCode::RST38)),
        }
    }
}

impl fmt::Display for Instruction {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        match self {
            NOP => write!(f, "NOP"),
            HALT => write!(f, "HALT"),
            STOP => write!(f, "STOP"),
            DAA => write!(f, "DAA"),
            CPL => write!(f, "CPL"),
            CCF => write!(f, "CCF"),
            SCF => write!(f, "SCF"),
            RLA => write!(f, "RLA"),
            RRA => write!(f, "RRA"),
            EI => write!(f, "EI"),
            DI => write!(f, "DI"),
            RST(code) => write!(f, "RST {code}"),
            RET(test) => write!(f, "RET {test}"),
            RETI => write!(f, "RETI"),
            JP(test, addr) => write!(f, "JP {test} {addr}"),
            JR(test) => write!(f, "JR {test}"),
            CALL(test) => write!(f, "CALL {test}"),
            ADDHL(source) => write!(f, "ADD HL, {source}"),
            ADDSP => write!(f, "ADD SP, HL"),
            ADD(source) => write!(f, "ADD A, {source}"),
            ADC(source) => write!(f, "ADC A, {source}"),
            SUB(source) => write!(f, "SUB A, {source}"),
            SBC(source) => write!(f, "SBC A, {source}"),
            AND(source) => write!(f, "AND A, {source}"),
            OR(source) => write!(f, "OR A, {source}"),
            XOR(source) => write!(f, "XOR A, {source}"),
            CP(source) => write!(f, "CP A, {source}"),
            INC(target) => write!(f, "INC {target}"),
            INC2(target) => write!(f, "INC {target}"),
            DEC(target) => write!(f, "DEC {target}"),
            DEC2(target) => write!(f, "DEC {target}"),
            LD(load) => write!(f, "LD {load}"),
            BIT(bit, source) => write!(f, "BIT {bit}, {source}"),
            PUSH(target) => write!(f, "PUSH {target}"),
            POP(target) => write!(f, "POP {target}"),
            RES(bit, source) => write!(f, "RES {bit}, {source}"),
            RL(source) => write!(f, "RL {source}"),
            RLC(source) => write!(f, "RLC {source}"),
            RLCA => write!(f, "RLCA"),
            RR(source) => write!(f, "RR {source}"),
            RRC(source) => write!(f, "RRC {source}"),
            RRCA => write!(f, "RRCA"),
            SET(bit, source) => write!(f, "SET {bit}, {source}"),
            SLA(source) => write!(f, "SLA {source}"),
            SRA(source) => write!(f, "SRA {source}"),
            SRL(source) => write!(f, "SRL {source}"),
            SWAP(source) => write!(f, "SWAP {source}"),
        }
    }
}
